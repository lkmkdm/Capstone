using UnityEngine;
using UnityEngine.UI;
using TMPro;
using Firebase.Auth;
using Firebase.Extensions;
using System;
using System.Collections;
using UnityEngine.SceneManagement;

public class EmailVerificationManager : MonoBehaviour
{
    [Header("Panels")]
    public GameObject RegisterPanel;
    public GameObject VerificationPanel;
    public GameObject CompletePanel;

    [Header("UI Elements")]
    public TMP_InputField emailInputField;
    public TMP_InputField passwordInputField;
    public TMP_InputField nameInputField;
    public TMP_Text timerText;
    public TMP_Text UserEmailText;
    public TMP_Text UserNameText;
    public Button verifyButton;
    public Button gotoTestButton;
    public Button BackPanelButton;

    [Header("Validator")]
    public RegisterManager validator;

    private FirebaseAuth auth;
    private FirebaseUser currentUser;

    private float timerDuration = 3600f; // 1ÏãúÍ∞Ñ
    private bool timerRunning = false;

    void Start()
    {
        auth = FirebaseAuth.DefaultInstance;
        RegisterPanel.SetActive(true);
        VerificationPanel.SetActive(false);
        CompletePanel.SetActive(false);

        if (BackPanelButton != null)
        {
            BackPanelButton.onClick.AddListener(OnClickBackPanel);
        }
    }

    public void OnClickNext()
    {
        Debug.Log("‚úÖ [OnClickNext] Ìò∏Ï∂úÎê®");

        validator.ValidateFields();

        if (!validator.AllFieldsValid())
        {
            Debug.Log("‚ùå [OnClickNext] ÌïÑÎìú Ïú†Ìö®ÌïòÏßÄ ÏïäÏùå. Ï§ëÎã®");
            return;
        }

        // ‚úÖ Î°úÎî©Ï∞Ω ÌëúÏãú
        if (LoadingScreenController.Instance != null)
            LoadingScreenController.Instance.loadingPanel.SetActive(true);

        // ‚úÖ ÌöåÏõêÍ∞ÄÏûÖ Ï≤òÎ¶¨
        string email = emailInputField.text;
        string password = passwordInputField.text;

        auth.CreateUserWithEmailAndPasswordAsync(email, password).ContinueWithOnMainThread(task =>
        {
            if (task.IsCompleted && !task.IsFaulted && !task.IsCanceled)
            {
                currentUser = task.Result.User;
                Debug.Log("‚úÖ ÌöåÏõêÍ∞ÄÏûÖ ÏÑ±Í≥µ");

                currentUser.SendEmailVerificationAsync().ContinueWithOnMainThread(sendTask =>
                {
                    if (sendTask.IsCompleted && !sendTask.IsFaulted)
                    {
                        UserEmailText.text = emailInputField.text;

                        RegisterPanel.SetActive(false);
                        VerificationPanel.SetActive(true);

                        DateTime startTime = DateTime.Now;
                        PlayerPrefs.SetString("email_verification_start_time", startTime.ToBinary().ToString());
                        timerRunning = true;
                    }
                    else
                    {
                        Debug.LogError("‚ùå Ïù¥Î©îÏùº Î∞úÏÜ° Ïã§Ìå®: " + sendTask.Exception);
                    }

                    // ‚úÖ Î°úÎî©Ï∞Ω Ïà®Í∏∞Í∏∞
                    if (LoadingScreenController.Instance != null)
                        LoadingScreenController.Instance.loadingPanel.SetActive(false);
                });
            }
            else
            {
                Debug.LogError("‚ùå ÌöåÏõêÍ∞ÄÏûÖ Ïã§Ìå®: " + task.Exception);

                // ‚úÖ Ïã§Ìå® ÏãúÏóêÎèÑ Î°úÎî©Ï∞Ω Îã´Í∏∞
                if (LoadingScreenController.Instance != null)
                    LoadingScreenController.Instance.loadingPanel.SetActive(false);
            }
        });
    }

    void Update()
    {
        if (timerRunning)
        {
            long binaryTime = Convert.ToInt64(PlayerPrefs.GetString("email_verification_start_time"));
            DateTime start = DateTime.FromBinary(binaryTime);
            float remaining = timerDuration - (float)(DateTime.Now - start).TotalSeconds;

            if (remaining > 0)
            {
                TimeSpan remainSpan = TimeSpan.FromSeconds(remaining);
                timerText.text = $"ÎÇ®ÏùÄ ÏãúÍ∞Ñ: {remainSpan.Minutes:D2}:{remainSpan.Seconds:D2}";
            }
            else
            {
                timerRunning = false;
                timerText.text = "ÏãúÍ∞Ñ Ï¥àÍ≥º. Í≥ÑÏ†ïÏù¥ ÏÇ≠Ï†úÎê©ÎãàÎã§.";
                CheckAndDeleteUser();
            }
        }
    }

    public void OnClickVerify()
    {
        if (currentUser != null)
        {
            if (LoadingScreenController.Instance != null)
                LoadingScreenController.Instance.loadingPanel.SetActive(true);

            currentUser.ReloadAsync().ContinueWithOnMainThread(task =>
            {
                if (LoadingScreenController.Instance != null)
                    LoadingScreenController.Instance.loadingPanel.SetActive(false);

                if (task.IsCompleted && currentUser.IsEmailVerified)
                {
                    Debug.Log("‚úÖ Ïù¥Î©îÏùº Ïù∏Ï¶ù ÏôÑÎ£å! ÏÇ¨Ïö©Ïûê Ïú†ÏßÄ");
                    timerRunning = false;
                    PlayerPrefs.DeleteKey("email_verification_start_time");

                    UserNameText.text = $"ÌôòÏòÅÌï©ÎãàÎã§! {nameInputField.text}Îãò!";
                    VerificationPanel.SetActive(false);
                    CompletePanel.SetActive(true);
                }
                else
                {
                    Debug.Log("‚è≥ ÏïÑÏßÅ Ïù∏Ï¶ùÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.");
                }
            });
        }
    }

    void CheckAndDeleteUser()
    {
        if (currentUser != null)
        {
            currentUser.ReloadAsync().ContinueWith(task =>
            {
                if (!currentUser.IsEmailVerified)
                {
                    currentUser.DeleteAsync().ContinueWith(deleteTask =>
                    {
                        Debug.Log("üóëÔ∏è Í≥ÑÏ†ï ÏÇ≠Ï†ú ÏôÑÎ£å");
                        PlayerPrefs.DeleteKey("email_verification_start_time");
                        RegisterPanel.SetActive(true);
                        VerificationPanel.SetActive(false);
                    });
                }
            });
        }
    }

    public void OnClickGotoTest()
    {
        SceneManager.LoadScene("AdhdTest");
    }

    public void OnClickBackPanel()
    {
        RegisterPanel.SetActive(true);
        VerificationPanel.SetActive(false);
    }
}